const app = require('../app');
const debug = require('debug')('confusionserver:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const config = require('../config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', config.port1);
app.set('secPort', config.port2);

/**
 * Create, and listen HTTP server
 */
const server = http.createServer(app);
server.listen(config.port1, config.hostName, () => {
  console.log(`Server is running on http://${config.hostName}:${config.port1}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Establish the HTTPS server, and then redirect HTTP requrests to HTTPS port (in app.js)
 */
const options = {
  key: fs.readFileSync(`${__dirname}/private.key`),
  cert: fs.readFileSync(`${__dirname}/certificate.pem`)
};
const secureServer = https.createServer(options, app);
secureServer.listen(app.get('secPort'), config.hostName, () => {
  console.log(`Secure server is running on https://${config.hostName}:${app.get('secPort')}`);
});
secureServer.on('error', onError);
secureServer.on('listening', onSecureListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onSecureListening() {
  const addr = secureServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
